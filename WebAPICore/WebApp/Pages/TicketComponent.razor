@page "/tickets/{ticketId:int}"
@inject NavigationManager NavigatorManager
@inject ITicketScreenUseCases TicketScreenUseCases

<h3>Ticket</h3>
<br />

<AlertComponent @ref="alertComponent"></AlertComponent>

@if (ticket != null)
{
    <EditForm Model="ticket" OnValidSubmit="Save">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText class="form-control" id="title" @bind-Value="ticket.Title"></InputText>
        </div>
        <div class="mb-3">
            <label for="desc" class="form-label">Description</label>
            <InputText class="form-control" id="desc" @bind-Value="ticket.Description"></InputText>
        </div>
        <div class="mb-3">
            <label for="owner" class="form-label">Owner</label>
            <InputText class="form-control" id="owner" @bind-Value="ticket.Owner" readonly></InputText>
        </div>
        <div class="mb-3">
            <label for="reportdate" class="form-label">Report Date</label>
            <InputDate class="form-control" id="reportdate" @bind-Value="ticket.ReportDate"></InputDate>
        </div>
        <div class="mb-3">
            <label for="duedate" class="form-label">Due Date</label>
            <InputDate class="form-control" id="duedate" @bind-Value="ticket.DueDate"></InputDate>
        </div>

        <button class="btn btn-primary" type="submit">Save</button>
    </EditForm>

}

@code {

    Ticket ticket;
    AlertComponent alertComponent;

    [Parameter]
    public int TicketId { get; set; }

    protected override async Task OnParametersSetAsync()
    {

        ticket = await TicketScreenUseCases.ViewTicketById(TicketId);
    }

    void Save()
    {
        bool bSuccess = true;

        if (!ticket.ValidateDescripiton())
        {
            alertComponent.ErrorMessage = "Description is required!";
            alertComponent.Show();
            bSuccess = false;
        }


        if (!ticket.ValidateFutureDueDate())
        {
            alertComponent.ErrorMessage = "The due date must be in the future";
            alertComponent.Show();
            bSuccess = false;
        }

        if (!ticket.ValidateReportDatePresence())
        {
            alertComponent.ErrorMessage = "The Report Date is required";
            alertComponent.Show();
            bSuccess = false;
        }


        if (!ticket.ValidateDueDatePresence())
        {
            alertComponent.ErrorMessage = "The Due Date is required";
            alertComponent.Show();
            bSuccess = false;
        }

        if (!ticket.ValidateDueDateAfterReportDate())
        {
            alertComponent.ErrorMessage = "The Due Date must be later than the Report Date";
            alertComponent.Show();
            bSuccess = false;
        }

        if (bSuccess)
        {
            TicketScreenUseCases.UpdateTicket(ticket);
            NavigatorManager.NavigateTo($"/projects/{ticket.ProjectId}/ticekts");
        }



    }
}
